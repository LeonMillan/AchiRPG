var e={7187:e=>{var t,n="object"==typeof Reflect?Reflect:null,r=n&&"function"==typeof n.apply?n.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};t=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var i=Number.isNaN||function(e){return e!=e};function o(){o.init.call(this)}e.exports=o,e.exports.once=function(e,t){return new Promise((function(n,r){function i(n){e.removeListener(t,o),r(n)}function o(){"function"==typeof e.removeListener&&e.removeListener("error",i),n([].slice.call(arguments))}E(e,t,o,{once:!0}),"error"!==t&&function(e,t,n){"function"==typeof e.on&&E(e,"error",t,n)}(e,i,{once:!0})}))},o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var s=10;function a(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function u(e){return void 0===e._maxListeners?o.defaultMaxListeners:e._maxListeners}function f(e,t,n,r){var i,o,s,f;if(a(n),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),o=e._events),s=o[t]),void 0===s)s=o[t]=n,++e._eventsCount;else if("function"==typeof s?s=o[t]=r?[n,s]:[s,n]:r?s.unshift(n):s.push(n),(i=u(e))>0&&s.length>i&&!s.warned){s.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=e,l.type=t,l.count=s.length,f=l,console&&console.warn&&console.warn(f)}return e}function l(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function d(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},i=l.bind(r);return i.listener=n,r.wrapFn=i,i}function c(e,t,n){var r=e._events;if(void 0===r)return[];var i=r[t];return void 0===i?[]:"function"==typeof i?n?[i.listener||i]:[i]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(i):_(i,i.length)}function h(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function _(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}function E(e,t,n,r){if("function"==typeof e.on)r.once?e.once(t,n):e.on(t,n);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function i(o){r.once&&e.removeEventListener(t,i),n(o)}))}}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return s},set:function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");s=e}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},o.prototype.getMaxListeners=function(){return u(this)},o.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var i="error"===e,o=this._events;if(void 0!==o)i=i&&void 0===o.error;else if(!i)return!1;if(i){var s;if(t.length>0&&(s=t[0]),s instanceof Error)throw s;var a=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw a.context=s,a}var u=o[e];if(void 0===u)return!1;if("function"==typeof u)r(u,this,t);else{var f=u.length,l=_(u,f);for(n=0;n<f;++n)r(l[n],this,t)}return!0},o.prototype.addListener=function(e,t){return f(this,e,t,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(e,t){return f(this,e,t,!0)},o.prototype.once=function(e,t){return a(t),this.on(e,d(this,e,t)),this},o.prototype.prependOnceListener=function(e,t){return a(t),this.prependListener(e,d(this,e,t)),this},o.prototype.removeListener=function(e,t){var n,r,i,o,s;if(a(t),void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(i=-1,o=n.length-1;o>=0;o--)if(n[o]===t||n[o].listener===t){s=n[o].listener,i=o;break}if(i<0)return this;0===i?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,i),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,s||t)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var i,o=Object.keys(n);for(r=0;r<o.length;++r)"removeListener"!==(i=o[r])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},o.prototype.listeners=function(e){return c(this,e,!0)},o.prototype.rawListeners=function(e){return c(this,e,!1)},o.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):h.call(e,t)},o.prototype.listenerCount=h,o.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},6792:(e,t,n)=>{n.r(t),n.d(t,{default:()=>i});var r=null;"undefined"!=typeof WebSocket?r=WebSocket:"undefined"!=typeof MozWebSocket?r=MozWebSocket:void 0!==n.g?r=n.g.WebSocket||n.g.MozWebSocket:"undefined"!=typeof window?r=window.WebSocket||window.MozWebSocket:"undefined"!=typeof self&&(r=self.WebSocket||self.MozWebSocket);const i=r},6108:function(e,t,n){var r,i,o,s,a,u,f,l,d,c,h,_,E,p=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{u(r.next(e))}catch(e){o(e)}}function a(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))},v=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)},T=this&&this.__classPrivateFieldSet||function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n},m=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.MINIMUM_SUPPORTED_AP_VERSION=t.Client=void 0;const P=n(7187),y=m(n(6792)),O=n(7429),w=n(684),b=n(1537),C=n(5432),N=n(3804),g=n(8783),A=n(6833),S=n(1159),R=n(3150),M=n(1230);t.Client=class{constructor(){r.add(this),i.set(this,void 0),o.set(this,b.CONNECTION_STATUS.DISCONNECTED),s.set(this,new P.EventEmitter),a.set(this,new N.DataManager(this)),u.set(this,new g.HintsManager(this)),f.set(this,new A.ItemsManager(this)),l.set(this,new S.LocationsManager(this)),d.set(this,new R.PlayersManager(this))}get status(){return v(this,o,"f")}get data(){return v(this,a,"f")}get hints(){return v(this,u,"f")}get items(){return v(this,f,"f")}get locations(){return v(this,l,"f")}get players(){return v(this,d,"f")}get uri(){if(v(this,i,"f"))return v(this,i,"f").url}connect(e){return p(this,void 0,void 0,(function*(){if(e.port<1||e.port>65535||!Number.isInteger(e.port))throw new Error(`Port must be an integer between 1 and 65535. Received: ${e.port}`);try{if(T(this,o,b.CONNECTION_STATUS.CONNECTING,"f"),"ws"===e.protocol)yield v(this,r,"m",h).call(this,`ws://${e.hostname}:${e.port}/`);else if("wss"===e.protocol)yield v(this,r,"m",h).call(this,`wss://${e.hostname}:${e.port}/`);else try{yield v(this,r,"m",h).call(this,`wss://${e.hostname}:${e.port}/`)}catch(t){yield v(this,r,"m",h).call(this,`ws://${e.hostname}:${e.port}/`)}return yield new Promise(((t,n)=>{const i=()=>{v(this,r,"m",c).call(this,e).then((e=>{v(this,s,"f").removeListener("__onRoomInfoLoaded",i.bind(this)),t(e)})).catch((e=>n(e)))};v(this,s,"f").addListener("__onRoomInfoLoaded",i.bind(this))}))}catch(e){throw this.disconnect(),e}}))}emitRawEvent(e,...t){v(this,s,"f").emit(e,...t)}send(...e){var t;null===(t=v(this,i,"f"))||void 0===t||t.send(JSON.stringify(e))}say(e){this.send({cmd:w.CLIENT_PACKET_TYPE.SAY,text:e})}updateStatus(e){this.send({cmd:w.CLIENT_PACKET_TYPE.STATUS_UPDATE,status:e})}disconnect(){var e;null===(e=v(this,i,"f"))||void 0===e||e.close(),T(this,i,void 0,"f"),T(this,o,b.CONNECTION_STATUS.DISCONNECTED,"f"),v(this,s,"f").removeAllListeners(),T(this,a,new N.DataManager(this),"f"),T(this,u,new g.HintsManager(this),"f"),T(this,f,new A.ItemsManager(this),"f"),T(this,l,new S.LocationsManager(this),"f"),T(this,d,new R.PlayersManager(this),"f")}addListener(e,t){v(this,s,"f").addListener(e,t)}removeListener(e,t){v(this,s,"f").removeListener(e,t)}},i=new WeakMap,o=new WeakMap,s=new WeakMap,a=new WeakMap,u=new WeakMap,f=new WeakMap,l=new WeakMap,d=new WeakMap,r=new WeakSet,c=function(e){var n;const r=null!==(n=e.version)&&void 0!==n?n:t.MINIMUM_SUPPORTED_AP_VERSION;return new Promise(((t,n)=>{var i,s,u;const f=e=>{T(this,o,b.CONNECTION_STATUS.CONNECTED,"f"),this.removeListener(w.SERVER_PACKET_TYPE.CONNECTED,f.bind(this)),t(e)};this.addListener(w.SERVER_PACKET_TYPE.CONNECTED,f.bind(this)),this.addListener(w.SERVER_PACKET_TYPE.CONNECTION_REFUSED,(e=>{this.disconnect(),n(e.errors)}).bind(this)),this.send({cmd:w.CLIENT_PACKET_TYPE.GET_DATA_PACKAGE,games:v(this,a,"f").games},{cmd:w.CLIENT_PACKET_TYPE.CONNECT,game:e.game,name:e.name,version:Object.assign(Object.assign({},r),{class:"Version"}),items_handling:e.items_handling,uuid:null!==(i=e.uuid)&&void 0!==i?i:(0,O.v4)(),tags:null!==(s=e.tags)&&void 0!==s?s:[],password:null!==(u=e.password)&&void 0!==u?u:""})}))},h=function(e){return new Promise(((t,n)=>{T(this,i,new y.default(e),"f"),v(this,i,"f").onopen=()=>{T(this,o,b.CONNECTION_STATUS.WAITING_FOR_AUTH,"f"),v(this,i,"f")?(v(this,i,"f").onmessage=v(this,r,"m",_).bind(this),t()):n(["Socket was closed unexpectedly."])},v(this,i,"f").onerror=e=>{T(this,o,b.CONNECTION_STATUS.DISCONNECTED,"f"),n([e])}}))},_=function(e){const t=JSON.parse(e.data.toString());for(const e of t)switch(v(this,s,"f").emit("PacketReceived",e),e.cmd){case w.SERVER_PACKET_TYPE.INVALID_PACKET:v(this,s,"f").emit(w.SERVER_PACKET_TYPE.INVALID_PACKET,e);break;case w.SERVER_PACKET_TYPE.BOUNCED:v(this,s,"f").emit(w.SERVER_PACKET_TYPE.BOUNCED,e);break;case w.SERVER_PACKET_TYPE.CONNECTION_REFUSED:v(this,s,"f").emit(w.SERVER_PACKET_TYPE.CONNECTION_REFUSED,e);break;case w.SERVER_PACKET_TYPE.CONNECTED:v(this,s,"f").emit(w.SERVER_PACKET_TYPE.CONNECTED,e);break;case w.SERVER_PACKET_TYPE.DATA_PACKAGE:v(this,s,"f").emit(w.SERVER_PACKET_TYPE.DATA_PACKAGE,e);break;case w.SERVER_PACKET_TYPE.LOCATION_INFO:v(this,s,"f").emit(w.SERVER_PACKET_TYPE.LOCATION_INFO,e);break;case w.SERVER_PACKET_TYPE.RECEIVED_ITEMS:v(this,s,"f").emit(w.SERVER_PACKET_TYPE.RECEIVED_ITEMS,e);break;case w.SERVER_PACKET_TYPE.RETRIEVED:v(this,s,"f").emit(w.SERVER_PACKET_TYPE.RETRIEVED,e);break;case w.SERVER_PACKET_TYPE.ROOM_INFO:v(this,s,"f").emit(w.SERVER_PACKET_TYPE.ROOM_INFO,e);break;case w.SERVER_PACKET_TYPE.ROOM_UPDATE:v(this,s,"f").emit(w.SERVER_PACKET_TYPE.ROOM_UPDATE,e);break;case w.SERVER_PACKET_TYPE.SET_REPLY:v(this,s,"f").emit(w.SERVER_PACKET_TYPE.SET_REPLY,e);break;case w.SERVER_PACKET_TYPE.PRINT_JSON:v(this,s,"f").emit(w.SERVER_PACKET_TYPE.PRINT_JSON,e,v(this,r,"m",E).call(this,e))}},E=function(e){return e.type===C.PRINT_JSON_TYPE.CHAT||e.type===C.PRINT_JSON_TYPE.SERVER_CHAT?e.message:e.data.reduce(((e,t)=>{var n,r;switch(t.type){case M.VALID_JSON_MESSAGE_TYPE.PLAYER_ID:return e+this.players.alias(parseInt(t.text));case M.VALID_JSON_MESSAGE_TYPE.LOCATION_ID:return e+(null===(n=this.players.get(t.player))||void 0===n?void 0:n.location(parseInt(t.text)));case M.VALID_JSON_MESSAGE_TYPE.ITEM_ID:return e+(null===(r=this.players.get(t.player))||void 0===r?void 0:r.item(parseInt(t.text)));default:return e+t.text}}),"")},t.MINIMUM_SUPPORTED_AP_VERSION={major:0,minor:4,build:2}},7321:function(e,t,n){var r,i,o,s,a=this&&this.__classPrivateFieldSet||function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n},u=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.SetOperationsBuilder=void 0;const f=n(684);t.SetOperationsBuilder=class{constructor(e,t,n=!1){r.set(this,[]),i.set(this,void 0),o.set(this,void 0),s.set(this,void 0),a(this,i,e,"f"),a(this,o,t,"f"),a(this,s,n,"f")}replace(e){return u(this,r,"f").push({operation:"replace",value:e}),this}default(e){return u(this,r,"f").push({operation:"default",value:e}),this}add(e){return u(this,r,"f").push({operation:"add",value:e}),this}multiply(e){return u(this,r,"f").push({operation:"mul",value:e}),this}power(e){return u(this,r,"f").push({operation:"pow",value:e}),this}modulo(e){return u(this,r,"f").push({operation:"mod",value:e}),this}max(e){return u(this,r,"f").push({operation:"max",value:e}),this}min(e){return u(this,r,"f").push({operation:"min",value:e}),this}and(e){return u(this,r,"f").push({operation:"and",value:e}),this}or(e){return u(this,r,"f").push({operation:"or",value:e}),this}xor(e){return u(this,r,"f").push({operation:"xor",value:e}),this}shiftLeft(e){return u(this,r,"f").push({operation:"left_shift",value:e}),this}shiftRight(e){return u(this,r,"f").push({operation:"right_shift",value:e}),this}remove(e){return u(this,r,"f").push({operation:"remove",value:e}),this}pop(e){return u(this,r,"f").push({operation:"pop",value:e}),this}update(e){return u(this,r,"f").push({operation:"update",value:e}),this}build(){return{cmd:f.CLIENT_PACKET_TYPE.SET,key:u(this,i,"f"),default:u(this,o,"f"),want_reply:u(this,s,"f"),operations:u(this,r,"f")}}},r=new WeakMap,i=new WeakMap,o=new WeakMap,s=new WeakMap},5161:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CLIENT_STATUS=void 0,t.CLIENT_STATUS={UNKNOWN:0,CONNECTED:5,READY:10,PLAYING:20,GOAL:30}},684:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CLIENT_PACKET_TYPE=t.SERVER_PACKET_TYPE=void 0,t.SERVER_PACKET_TYPE={BOUNCED:"Bounced",CONNECTED:"Connected",CONNECTION_REFUSED:"ConnectionRefused",DATA_PACKAGE:"DataPackage",INVALID_PACKET:"InvalidPacket",LOCATION_INFO:"LocationInfo",PRINT_JSON:"PrintJSON",RECEIVED_ITEMS:"ReceivedItems",RETRIEVED:"Retrieved",ROOM_INFO:"RoomInfo",ROOM_UPDATE:"RoomUpdate",SET_REPLY:"SetReply"},t.CLIENT_PACKET_TYPE={BOUNCE:"Bounce",CONNECT:"Connect",CONNECT_UPDATE:"ConnectUpdate",GET_DATA_PACKAGE:"GetDataPackage",GET:"Get",LOCATION_CHECKS:"LocationChecks",LOCATION_SCOUTS:"LocationScouts",SAY:"Say",SET_NOTIFY:"SetNotify",SET:"Set",STATUS_UPDATE:"StatusUpdate",SYNC:"Sync"}},8868:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.COMMON_TAGS=void 0,t.COMMON_TAGS={REFERENCE_CLIENT:"AP",DEATH_LINK:"DeathLink",TRACKER:"Tracker",TEXT_ONLY:"TextOnly"}},2135:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CONNECTION_ERROR=void 0,t.CONNECTION_ERROR={INVALID_SLOT:"InvalidSlot",INVALID_GAME:"InvalidGame",INCOMPATIBLE_VERSION:"IncompatibleVersion",INVALID_PASSWORD:"InvalidPassword",INVALID_ITEMS_HANDLING:"InvalidItemsHandling"}},1537:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CONNECTION_STATUS=void 0,t.CONNECTION_STATUS={DISCONNECTED:"Disconnected",CONNECTING:"Connecting",WAITING_FOR_AUTH:"Waiting For Authentication",CONNECTED:"Connected"}},3423:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CREATE_AS_HINT_MODE=void 0,t.CREATE_AS_HINT_MODE={NO_HINT:0,HINT_EVERYTHING:1,HINT_ONLY_NEW:2}},343:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ITEM_FLAGS=void 0,t.ITEM_FLAGS={FILLER:0,PROGRESSION:1,NEVER_EXCLUDE:2,TRAP:4}},187:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ITEMS_HANDLING_FLAGS=void 0,t.ITEMS_HANDLING_FLAGS={LOCAL_ONLY:0,REMOTE_DIFFERENT_WORLDS:1,REMOTE_OWN_WORLD:2,REMOTE_STARTING_INVENTORY:4,REMOTE_ALL:7}},6582:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.PACKET_PROBLEM_TYPE=void 0,t.PACKET_PROBLEM_TYPE={CMD:"cmd",ARGUMENTS:"arguments"}},1386:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.REDUCED_PERMISSION=t.PERMISSION=void 0,t.PERMISSION={DISABLED:0,ENABLED:1,GOAL:2,AUTO:6,AUTO_ENABLED:7},t.REDUCED_PERMISSION={DISABLED:0,ENABLED:1,GOAL:2}},5432:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.PRINT_JSON_TYPE=void 0,t.PRINT_JSON_TYPE={ITEM_SEND:"ItemSend",ITEM_CHEAT:"ItemCheat",HINT:"Hint",JOIN:"Join",PART:"Part",CHAT:"Chat",SERVER_CHAT:"ServerChat",TUTORIAL:"Tutorial",TAGS_CHANGED:"TagsChanged",COMMAND_RESULT:"CommandResult",ADMIN_COMMAND_RESULT:"AdminCommandResult",GOAL:"Goal",RELEASE:"Release",COLLECT:"Collect",COUNTDOWN:"Countdown"}},1723:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SLOT_TYPE=void 0,t.SLOT_TYPE={SPECTATOR:0,PLAYER:1,GROUP:2}},3607:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var i=Object.getOwnPropertyDescriptor(t,n);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,i)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),i(n(6108),t),i(n(7321),t),i(n(5161),t),i(n(684),t),i(n(8868),t),i(n(2135),t),i(n(1537),t),i(n(3423),t),i(n(343),t),i(n(187),t),i(n(6582),t),i(n(1386),t),i(n(5432),t),i(n(1723),t),i(n(3804),t),i(n(8783),t),i(n(6833),t),i(n(1159),t),i(n(3150),t),i(n(2422),t),i(n(1551),t),i(n(8858),t),i(n(8602),t),i(n(8247),t),i(n(8223),t),i(n(9698),t),i(n(1522),t),i(n(1726),t),i(n(8264),t),i(n(2888),t),i(n(1486),t),i(n(7345),t),i(n(6240),t),i(n(7433),t),i(n(7095),t),i(n(4199),t),i(n(6394),t),i(n(3859),t),i(n(2864),t),i(n(7141),t),i(n(3267),t),i(n(3396),t),i(n(5145),t),i(n(2014),t),i(n(1230),t)},3804:function(e,t,n){var r,i,o,s,a,u,f,l,d,c,h,_,E,p,v,T,m,P,y=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{u(r.next(e))}catch(e){o(e)}}function a(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))},O=this&&this.__classPrivateFieldSet||function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n},w=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.DataManager=void 0;const b=n(684),C=n(1386),N=n(1723);t.DataManager=class{constructor(e){r.add(this),i.set(this,void 0),o.set(this,new Map),s.set(this,[]),a.set(this,[]),u.set(this,0),f.set(this,0),l.set(this,{}),d.set(this,-1),c.set(this,-1),h.set(this,""),_.set(this,[]),E.set(this,{release:C.PERMISSION.DISABLED,collect:C.PERMISSION.DISABLED,remaining:C.PERMISSION.DISABLED}),O(this,i,e,"f"),w(this,i,"f").addListener(b.SERVER_PACKET_TYPE.DATA_PACKAGE,w(this,r,"m",v).bind(this)),w(this,i,"f").addListener(b.SERVER_PACKET_TYPE.CONNECTED,w(this,r,"m",T).bind(this)),w(this,i,"f").addListener(b.SERVER_PACKET_TYPE.ROOM_INFO,w(this,r,"m",m).bind(this)),w(this,i,"f").addListener(b.SERVER_PACKET_TYPE.ROOM_UPDATE,w(this,r,"m",P).bind(this)),w(this,i,"f").addListener(b.SERVER_PACKET_TYPE.SET_REPLY,w(this,r,"m",p).bind(this))}get package(){return w(this,o,"f")}get players(){return w(this,s,"f")}get games(){return w(this,a,"f")}get hintCost(){return w(this,u,"f")}get hintPoints(){return w(this,f,"f")}get slotData(){return w(this,l,"f")}get slot(){return w(this,d,"f")}get team(){return w(this,c,"f")}get seed(){return w(this,h,"f")}get permissions(){return w(this,E,"f")}set(e){return y(this,void 0,void 0,(function*(){const t=e.build();if(t.want_reply)return new Promise((e=>{w(this,_,"f").push({key:t.key,resolve:e}),w(this,i,"f").send(t)}));w(this,i,"f").send(t)}))}},i=new WeakMap,o=new WeakMap,s=new WeakMap,a=new WeakMap,u=new WeakMap,f=new WeakMap,l=new WeakMap,d=new WeakMap,c=new WeakMap,h=new WeakMap,_=new WeakMap,E=new WeakMap,r=new WeakSet,p=function(e){const t=w(this,_,"f").findIndex((t=>t.key===e.key));if(-1!==t){const{resolve:n}=w(this,_,"f")[t];w(this,_,"f").splice(t,1),n(e)}},v=function(e){for(const t in e.data.games){const n=e.data.games[t];w(this,o,"f").set(t,n);let r=!1,i=!1;n.item_name_groups||(n.item_name_groups={Everything:[]},r=!0),n.location_name_groups||(n.location_name_groups={Everywhere:[]},i=!0),n.location_id_to_name={},n.item_id_to_name={};for(const[e,t]of Object.entries(n.location_name_to_id))n.location_id_to_name[t]=e,i&&n.location_name_groups.Everywhere.push(e);for(const[e,t]of Object.entries(n.item_name_to_id))n.item_id_to_name[t]=e,r&&n.item_name_groups.Everything.push(e)}},T=function(e){var t;const n=[{name:"Archipelago",slot:0,game:"Archipelago",team:0,type:N.SLOT_TYPE.SPECTATOR,alias:"Archipelago",group_members:[],item:e=>w(this,i,"f").items.name(0,e),location:e=>w(this,i,"f").locations.name(0,e)}];for(const t of e.players){const r=Object.assign(Object.assign(Object.assign({},t),e.slot_info[t.slot]),{item:e=>w(this,i,"f").items.name(t.slot,e),location:e=>w(this,i,"f").locations.name(t.slot,e)});n[r.slot]=r}O(this,s,n,"f"),O(this,d,e.slot,"f"),O(this,c,e.team,"f"),O(this,f,null!==(t=e.hint_points)&&void 0!==t?t:0,"f"),O(this,l,e.slot_data,"f")},m=function(e){O(this,h,e.seed_name,"f"),O(this,u,e.hint_cost,"f"),O(this,E,e.permissions,"f"),O(this,a,e.games,"f"),w(this,i,"f").emitRawEvent("__onRoomInfoLoaded")},P=function(e){if(e.hint_points&&O(this,f,e.hint_points,"f"),e.hint_cost&&O(this,u,e.hint_cost,"f"),e.permissions&&O(this,E,e.permissions,"f"),e.players)for(const t of e.players)w(this,s,"f")[t.slot]=Object.assign(Object.assign({},w(this,s,"f")[t.slot]),t)}},8783:function(e,t,n){var r,i,o,s,a,u,f=this&&this.__classPrivateFieldSet||function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n},l=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.HintsManager=void 0;const d=n(684);t.HintsManager=class{constructor(e){r.add(this),i.set(this,void 0),o.set(this,[]),f(this,i,e,"f"),l(this,i,"f").addListener(d.SERVER_PACKET_TYPE.SET_REPLY,l(this,r,"m",s).bind(this)),l(this,i,"f").addListener(d.SERVER_PACKET_TYPE.RETRIEVED,l(this,r,"m",a).bind(this)),l(this,i,"f").addListener(d.SERVER_PACKET_TYPE.CONNECTED,l(this,r,"m",u).bind(this))}get mine(){return l(this,o,"f")}},i=new WeakMap,o=new WeakMap,r=new WeakSet,s=function(e){e.key===`_read_hints_${l(this,i,"f").data.team}_${l(this,i,"f").data.slot}`&&f(this,o,e.value,"f")},a=function(e){for(const t in e.keys)t===`_read_hints_${l(this,i,"f").data.team}_${l(this,i,"f").data.slot}`&&f(this,o,e.keys[t],"f")},u=function(){l(this,i,"f").send({cmd:d.CLIENT_PACKET_TYPE.SET_NOTIFY,keys:[`_read_hints_${l(this,i,"f").data.team}_${l(this,i,"f").data.slot}`]},{cmd:d.CLIENT_PACKET_TYPE.GET,keys:[`_read_hints_${l(this,i,"f").data.team}_${l(this,i,"f").data.slot}`]})}},6833:function(e,t,n){var r,i,o,s,a,u=this&&this.__classPrivateFieldSet||function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n},f=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.ItemsManager=void 0;const l=n(684);t.ItemsManager=class{constructor(e){r.add(this),i.set(this,void 0),o.set(this,[]),s.set(this,0),u(this,i,e,"f"),f(this,i,"f").addListener(l.SERVER_PACKET_TYPE.RECEIVED_ITEMS,f(this,r,"m",a).bind(this))}name(e,t){if(isNaN(t)||!Number.isSafeInteger(t))throw new Error(`'id' must be a safe integer. Received: ${t}`);let n;if("string"==typeof e)n=e;else{if(isNaN(e)||!Number.isSafeInteger(e))throw new Error(`'player' must be a safe integer. Received: ${t}`);const r=f(this,i,"f").players.get(e);if(!r)return`Unknown Item: ${t}`;n=r.game}const r=f(this,i,"f").data.package.get(n);if(!r)return`Unknown Item: ${t}`;const o=r.item_id_to_name[t];return o||`Unknown Item: ${t}`}group(e,t){const n=f(this,i,"f").data.package.get(e);if(!n)throw new Error(`Unknown Game: ${e}`);const r=n.item_name_groups[t];return r||[]}get index(){return f(this,s,"f")}get received(){return f(this,o,"f")}},i=new WeakMap,o=new WeakMap,s=new WeakMap,r=new WeakSet,a=function(e){if(e.index>f(this,s,"f"))return u(this,s,0,"f"),void f(this,i,"f").send({cmd:l.CLIENT_PACKET_TYPE.SYNC});let t=e.index;for(const n of e.items)f(this,o,"f")[t++]=n}},1159:function(e,t,n){var r,i,o,s,a,u,f=this&&this.__classPrivateFieldSet||function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n},l=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.LocationsManager=void 0;const d=n(684),c=n(3423);t.LocationsManager=class{constructor(e){r.add(this),i.set(this,void 0),o.set(this,[]),s.set(this,[]),f(this,i,e,"f"),l(this,i,"f").addListener(d.SERVER_PACKET_TYPE.CONNECTED,l(this,r,"m",a).bind(this)),l(this,i,"f").addListener(d.SERVER_PACKET_TYPE.ROOM_UPDATE,l(this,r,"m",u).bind(this))}get checked(){return l(this,o,"f")}get missing(){return l(this,s,"f")}check(...e){l(this,i,"f").send({cmd:d.CLIENT_PACKET_TYPE.LOCATION_CHECKS,locations:e})}scout(e=c.CREATE_AS_HINT_MODE.NO_HINT,...t){l(this,i,"f").send({cmd:d.CLIENT_PACKET_TYPE.LOCATION_SCOUTS,locations:t,create_as_hint:e})}name(e,t){if(isNaN(t)||!Number.isSafeInteger(t))throw new Error(`'id' must be a safe integer. Received: ${t}`);let n;if("string"==typeof e)n=e;else{if(isNaN(e)||!Number.isSafeInteger(e))throw new Error(`'player' must be a safe integer. Received: ${t}`);const r=l(this,i,"f").players.get(e);if(!r)return`Unknown Location: ${t}`;n=r.game}const r=l(this,i,"f").data.package.get(n);if(!r)return`Unknown Location: ${t}`;const o=r.location_id_to_name[t];return o||`Unknown Location: ${t}`}group(e,t){const n=l(this,i,"f").data.package.get(e);if(!n)throw new Error(`Unknown Game: ${e}`);const r=n.location_name_groups[t];return r||[]}autoRelease(){l(this,i,"f").send({cmd:d.CLIENT_PACKET_TYPE.LOCATION_CHECKS,locations:l(this,s,"f")})}},i=new WeakMap,o=new WeakMap,s=new WeakMap,r=new WeakSet,a=function(e){f(this,o,e.checked_locations,"f"),f(this,s,e.missing_locations,"f")},u=function(e){if(e.checked_locations)for(const t of e.checked_locations)if(!l(this,o,"f").includes(t)){l(this,o,"f").push(t);const e=l(this,s,"f").indexOf(t);-1!==e&&l(this,s,"f").splice(e,1)}}},3150:function(e,t){var n,r=this&&this.__classPrivateFieldSet||function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n},i=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.PlayersManager=void 0;t.PlayersManager=class{constructor(e){n.set(this,void 0),r(this,n,e,"f")}get all(){return i(this,n,"f").data.players}get(e){return i(this,n,"f").data.players[e]}name(e){var t;if(0===e)return"Archipelago";const n=null===(t=this.get(e))||void 0===t?void 0:t.name;if(!n)throw new Error(`Unable to find player by id: ${e}`);return n}alias(e){var t;if(0===e)return"Archipelago";const n=null===(t=this.get(e))||void 0===t?void 0:t.alias;if(!n)throw new Error(`Unable to find player by id: ${e}`);return n}game(e){var t;if(0===e)return"Archipelago";const n=null===(t=this.get(e))||void 0===t?void 0:t.game;if(!n)throw new Error(`Unable to find player by id: ${e}`);return n}members(e){var t;const n=null===(t=this.get(e))||void 0===t?void 0:t.group_members;return n||[]}},n=new WeakMap},2422:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},1551:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},8858:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},8602:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},8247:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},8223:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},9698:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},1522:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},1726:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},8264:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},2888:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},1486:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},7345:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},6240:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},7433:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},7095:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},4199:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},6394:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},3859:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},2864:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},7141:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},3267:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},3396:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},5145:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},2014:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},6231:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},4101:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},8380:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},7749:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},4569:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},182:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},44:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.VALID_JSON_COLOR_TYPE=t.VALID_JSON_MESSAGE_TYPE=void 0,t.VALID_JSON_MESSAGE_TYPE={TEXT:"text",PLAYER_ID:"player_id",PLAYER_NAME:"player_name",ITEM_ID:"item_id",ITEM_NAME:"item_name",LOCATION_ID:"location_id",LOCATION_NAME:"location_name",ENTRANCE_NAME:"entrance_name",COLOR:"color"},t.VALID_JSON_COLOR_TYPE={BOLD:"bold",UNDERLINE:"underline",BLACK:"black",RED:"red",GREEN:"green",YELLOW:"yellow",BLUE:"blue",MAGENTA:"magenta",CYAN:"cyan",WHITE:"white",BLACK_BACKGROUND:"black_bg",RED_BACKGROUND:"red_bg",GREEN_BACKGROUND:"green_bg",YELLOW_BACKGROUND:"yellow_bg",BLUE_BACKGROUND:"blue_bg",PURPLE_BACKGROUND:"purple_bg",CYAN_BACKGROUND:"cyan_bg",WHITE_BACKGROUND:"white_bg"}},2561:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},9507:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},2034:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},4274:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},4971:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},2540:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},3585:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},2011:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},1230:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var i=Object.getOwnPropertyDescriptor(t,n);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,i)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),i(n(6231),t),i(n(4101),t),i(n(8380),t),i(n(7749),t),i(n(4569),t),i(n(182),t),i(n(44),t),i(n(2561),t),i(n(9507),t),i(n(2034),t),i(n(4274),t),i(n(4971),t),i(n(2540),t),i(n(3585),t),i(n(2011),t)},7429:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"NIL",{enumerable:!0,get:function(){return a.default}}),Object.defineProperty(t,"parse",{enumerable:!0,get:function(){return d.default}}),Object.defineProperty(t,"stringify",{enumerable:!0,get:function(){return l.default}}),Object.defineProperty(t,"v1",{enumerable:!0,get:function(){return r.default}}),Object.defineProperty(t,"v3",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(t,"v4",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(t,"v5",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(t,"validate",{enumerable:!0,get:function(){return f.default}}),Object.defineProperty(t,"version",{enumerable:!0,get:function(){return u.default}});var r=c(n(3990)),i=c(n(8237)),o=c(n(5355)),s=c(n(3764)),a=c(n(6314)),u=c(n(8464)),f=c(n(6435)),l=c(n(4008)),d=c(n(8222));function c(e){return e&&e.__esModule?e:{default:e}}},4163:(e,t)=>{function n(e){return 14+(e+64>>>9<<4)+1}function r(e,t){const n=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(n>>16)<<16|65535&n}function i(e,t,n,i,o,s){return r((a=r(r(t,e),r(i,s)))<<(u=o)|a>>>32-u,n);var a,u}function o(e,t,n,r,o,s,a){return i(t&n|~t&r,e,t,o,s,a)}function s(e,t,n,r,o,s,a){return i(t&r|n&~r,e,t,o,s,a)}function a(e,t,n,r,o,s,a){return i(t^n^r,e,t,o,s,a)}function u(e,t,n,r,o,s,a){return i(n^(t|~r),e,t,o,s,a)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var f=function(e){if("string"==typeof e){const t=unescape(encodeURIComponent(e));e=new Uint8Array(t.length);for(let n=0;n<t.length;++n)e[n]=t.charCodeAt(n)}return function(e){const t=[],n=32*e.length,r="0123456789abcdef";for(let i=0;i<n;i+=8){const n=e[i>>5]>>>i%32&255,o=parseInt(r.charAt(n>>>4&15)+r.charAt(15&n),16);t.push(o)}return t}(function(e,t){e[t>>5]|=128<<t%32,e[n(t)-1]=t;let i=1732584193,f=-271733879,l=-1732584194,d=271733878;for(let t=0;t<e.length;t+=16){const n=i,c=f,h=l,_=d;i=o(i,f,l,d,e[t],7,-680876936),d=o(d,i,f,l,e[t+1],12,-389564586),l=o(l,d,i,f,e[t+2],17,606105819),f=o(f,l,d,i,e[t+3],22,-1044525330),i=o(i,f,l,d,e[t+4],7,-176418897),d=o(d,i,f,l,e[t+5],12,1200080426),l=o(l,d,i,f,e[t+6],17,-1473231341),f=o(f,l,d,i,e[t+7],22,-45705983),i=o(i,f,l,d,e[t+8],7,1770035416),d=o(d,i,f,l,e[t+9],12,-1958414417),l=o(l,d,i,f,e[t+10],17,-42063),f=o(f,l,d,i,e[t+11],22,-1990404162),i=o(i,f,l,d,e[t+12],7,1804603682),d=o(d,i,f,l,e[t+13],12,-40341101),l=o(l,d,i,f,e[t+14],17,-1502002290),f=o(f,l,d,i,e[t+15],22,1236535329),i=s(i,f,l,d,e[t+1],5,-165796510),d=s(d,i,f,l,e[t+6],9,-1069501632),l=s(l,d,i,f,e[t+11],14,643717713),f=s(f,l,d,i,e[t],20,-373897302),i=s(i,f,l,d,e[t+5],5,-701558691),d=s(d,i,f,l,e[t+10],9,38016083),l=s(l,d,i,f,e[t+15],14,-660478335),f=s(f,l,d,i,e[t+4],20,-405537848),i=s(i,f,l,d,e[t+9],5,568446438),d=s(d,i,f,l,e[t+14],9,-1019803690),l=s(l,d,i,f,e[t+3],14,-187363961),f=s(f,l,d,i,e[t+8],20,1163531501),i=s(i,f,l,d,e[t+13],5,-1444681467),d=s(d,i,f,l,e[t+2],9,-51403784),l=s(l,d,i,f,e[t+7],14,1735328473),f=s(f,l,d,i,e[t+12],20,-1926607734),i=a(i,f,l,d,e[t+5],4,-378558),d=a(d,i,f,l,e[t+8],11,-2022574463),l=a(l,d,i,f,e[t+11],16,1839030562),f=a(f,l,d,i,e[t+14],23,-35309556),i=a(i,f,l,d,e[t+1],4,-1530992060),d=a(d,i,f,l,e[t+4],11,1272893353),l=a(l,d,i,f,e[t+7],16,-155497632),f=a(f,l,d,i,e[t+10],23,-1094730640),i=a(i,f,l,d,e[t+13],4,681279174),d=a(d,i,f,l,e[t],11,-358537222),l=a(l,d,i,f,e[t+3],16,-722521979),f=a(f,l,d,i,e[t+6],23,76029189),i=a(i,f,l,d,e[t+9],4,-640364487),d=a(d,i,f,l,e[t+12],11,-421815835),l=a(l,d,i,f,e[t+15],16,530742520),f=a(f,l,d,i,e[t+2],23,-995338651),i=u(i,f,l,d,e[t],6,-198630844),d=u(d,i,f,l,e[t+7],10,1126891415),l=u(l,d,i,f,e[t+14],15,-1416354905),f=u(f,l,d,i,e[t+5],21,-57434055),i=u(i,f,l,d,e[t+12],6,1700485571),d=u(d,i,f,l,e[t+3],10,-1894986606),l=u(l,d,i,f,e[t+10],15,-1051523),f=u(f,l,d,i,e[t+1],21,-2054922799),i=u(i,f,l,d,e[t+8],6,1873313359),d=u(d,i,f,l,e[t+15],10,-30611744),l=u(l,d,i,f,e[t+6],15,-1560198380),f=u(f,l,d,i,e[t+13],21,1309151649),i=u(i,f,l,d,e[t+4],6,-145523070),d=u(d,i,f,l,e[t+11],10,-1120210379),l=u(l,d,i,f,e[t+2],15,718787259),f=u(f,l,d,i,e[t+9],21,-343485551),i=r(i,n),f=r(f,c),l=r(l,h),d=r(d,_)}return[i,f,l,d]}(function(e){if(0===e.length)return[];const t=8*e.length,r=new Uint32Array(n(t));for(let n=0;n<t;n+=8)r[n>>5]|=(255&e[n/8])<<n%32;return r}(e),8*e.length))};t.default=f},4790:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};t.default=n},6314:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default="00000000-0000-0000-0000-000000000000"},8222:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,i=(r=n(6435))&&r.__esModule?r:{default:r};var o=function(e){if(!(0,i.default)(e))throw TypeError("Invalid UUID");let t;const n=new Uint8Array(16);return n[0]=(t=parseInt(e.slice(0,8),16))>>>24,n[1]=t>>>16&255,n[2]=t>>>8&255,n[3]=255&t,n[4]=(t=parseInt(e.slice(9,13),16))>>>8,n[5]=255&t,n[6]=(t=parseInt(e.slice(14,18),16))>>>8,n[7]=255&t,n[8]=(t=parseInt(e.slice(19,23),16))>>>8,n[9]=255&t,n[10]=(t=parseInt(e.slice(24,36),16))/1099511627776&255,n[11]=t/4294967296&255,n[12]=t>>>24&255,n[13]=t>>>16&255,n[14]=t>>>8&255,n[15]=255&t,n};t.default=o},58:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i},3319:(e,t)=>{let n;Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){if(!n&&(n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!n))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return n(r)};const r=new Uint8Array(16)},3757:(e,t)=>{function n(e,t,n,r){switch(e){case 0:return t&n^~t&r;case 1:case 3:return t^n^r;case 2:return t&n^t&r^n&r}}function r(e,t){return e<<t|e>>>32-t}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=function(e){const t=[1518500249,1859775393,2400959708,3395469782],i=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof e){const t=unescape(encodeURIComponent(e));e=[];for(let n=0;n<t.length;++n)e.push(t.charCodeAt(n))}else Array.isArray(e)||(e=Array.prototype.slice.call(e));e.push(128);const o=e.length/4+2,s=Math.ceil(o/16),a=new Array(s);for(let t=0;t<s;++t){const n=new Uint32Array(16);for(let r=0;r<16;++r)n[r]=e[64*t+4*r]<<24|e[64*t+4*r+1]<<16|e[64*t+4*r+2]<<8|e[64*t+4*r+3];a[t]=n}a[s-1][14]=8*(e.length-1)/Math.pow(2,32),a[s-1][14]=Math.floor(a[s-1][14]),a[s-1][15]=8*(e.length-1)&4294967295;for(let e=0;e<s;++e){const o=new Uint32Array(80);for(let t=0;t<16;++t)o[t]=a[e][t];for(let e=16;e<80;++e)o[e]=r(o[e-3]^o[e-8]^o[e-14]^o[e-16],1);let s=i[0],u=i[1],f=i[2],l=i[3],d=i[4];for(let e=0;e<80;++e){const i=Math.floor(e/20),a=r(s,5)+n(i,u,f,l)+d+t[i]+o[e]>>>0;d=l,l=f,f=r(u,30)>>>0,u=s,s=a}i[0]=i[0]+s>>>0,i[1]=i[1]+u>>>0,i[2]=i[2]+f>>>0,i[3]=i[3]+l>>>0,i[4]=i[4]+d>>>0}return[i[0]>>24&255,i[0]>>16&255,i[0]>>8&255,255&i[0],i[1]>>24&255,i[1]>>16&255,i[1]>>8&255,255&i[1],i[2]>>24&255,i[2]>>16&255,i[2]>>8&255,255&i[2],i[3]>>24&255,i[3]>>16&255,i[3]>>8&255,255&i[3],i[4]>>24&255,i[4]>>16&255,i[4]>>8&255,255&i[4]]};t.default=i},4008:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,t.unsafeStringify=s;var r,i=(r=n(6435))&&r.__esModule?r:{default:r};const o=[];for(let e=0;e<256;++e)o.push((e+256).toString(16).slice(1));function s(e,t=0){return(o[e[t+0]]+o[e[t+1]]+o[e[t+2]]+o[e[t+3]]+"-"+o[e[t+4]]+o[e[t+5]]+"-"+o[e[t+6]]+o[e[t+7]]+"-"+o[e[t+8]]+o[e[t+9]]+"-"+o[e[t+10]]+o[e[t+11]]+o[e[t+12]]+o[e[t+13]]+o[e[t+14]]+o[e[t+15]]).toLowerCase()}var a=function(e,t=0){const n=s(e,t);if(!(0,i.default)(n))throw TypeError("Stringified UUID is invalid");return n};t.default=a},3990:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,i=(r=n(3319))&&r.__esModule?r:{default:r},o=n(4008);let s,a,u=0,f=0;var l=function(e,t,n){let r=t&&n||0;const l=t||new Array(16);let d=(e=e||{}).node||s,c=void 0!==e.clockseq?e.clockseq:a;if(null==d||null==c){const t=e.random||(e.rng||i.default)();null==d&&(d=s=[1|t[0],t[1],t[2],t[3],t[4],t[5]]),null==c&&(c=a=16383&(t[6]<<8|t[7]))}let h=void 0!==e.msecs?e.msecs:Date.now(),_=void 0!==e.nsecs?e.nsecs:f+1;const E=h-u+(_-f)/1e4;if(E<0&&void 0===e.clockseq&&(c=c+1&16383),(E<0||h>u)&&void 0===e.nsecs&&(_=0),_>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");u=h,f=_,a=c,h+=122192928e5;const p=(1e4*(268435455&h)+_)%4294967296;l[r++]=p>>>24&255,l[r++]=p>>>16&255,l[r++]=p>>>8&255,l[r++]=255&p;const v=h/4294967296*1e4&268435455;l[r++]=v>>>8&255,l[r++]=255&v,l[r++]=v>>>24&15|16,l[r++]=v>>>16&255,l[r++]=c>>>8|128,l[r++]=255&c;for(let e=0;e<6;++e)l[r+e]=d[e];return t||(0,o.unsafeStringify)(l)};t.default=l},8237:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=o(n(7925)),i=o(n(4163));function o(e){return e&&e.__esModule?e:{default:e}}var s=(0,r.default)("v3",48,i.default);t.default=s},7925:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.URL=t.DNS=void 0,t.default=function(e,t,n){function r(e,r,s,a){var u;if("string"==typeof e&&(e=function(e){e=unescape(encodeURIComponent(e));const t=[];for(let n=0;n<e.length;++n)t.push(e.charCodeAt(n));return t}(e)),"string"==typeof r&&(r=(0,o.default)(r)),16!==(null===(u=r)||void 0===u?void 0:u.length))throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");let f=new Uint8Array(16+e.length);if(f.set(r),f.set(e,r.length),f=n(f),f[6]=15&f[6]|t,f[8]=63&f[8]|128,s){a=a||0;for(let e=0;e<16;++e)s[a+e]=f[e];return s}return(0,i.unsafeStringify)(f)}try{r.name=e}catch(e){}return r.DNS=s,r.URL=a,r};var r,i=n(4008),o=(r=n(8222))&&r.__esModule?r:{default:r};const s="6ba7b810-9dad-11d1-80b4-00c04fd430c8";t.DNS=s;const a="6ba7b811-9dad-11d1-80b4-00c04fd430c8";t.URL=a},5355:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=s(n(4790)),i=s(n(3319)),o=n(4008);function s(e){return e&&e.__esModule?e:{default:e}}var a=function(e,t,n){if(r.default.randomUUID&&!t&&!e)return r.default.randomUUID();const s=(e=e||{}).random||(e.rng||i.default)();if(s[6]=15&s[6]|64,s[8]=63&s[8]|128,t){n=n||0;for(let e=0;e<16;++e)t[n+e]=s[e];return t}return(0,o.unsafeStringify)(s)};t.default=a},3764:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=o(n(7925)),i=o(n(3757));function o(e){return e&&e.__esModule?e:{default:e}}var s=(0,r.default)("v5",80,i.default);t.default=s},6435:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,i=(r=n(58))&&r.__esModule?r:{default:r};var o=function(e){return"string"==typeof e&&i.default.test(e)};t.default=o},8464:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,i=(r=n(6435))&&r.__esModule?r:{default:r};var o=function(e){if(!(0,i.default)(e))throw TypeError("Invalid UUID");return parseInt(e.slice(14,15),16)};t.default=o}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r=n(3607);window.ArchiLib=r;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,